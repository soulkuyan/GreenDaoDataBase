package com.visunex.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.greendaodatabase.entites.Hospital;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOSPITAL".
*/
public class HospitalDao extends AbstractDao<Hospital, Long> {

    public static final String TABLENAME = "HOSPITAL";

    /**
     * Properties of entity Hospital.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdHospital = new Property(0, Long.class, "idHospital", true, "_id");
        public final static Property HospitalSn = new Property(1, String.class, "hospitalSn", false, "HOSPITAL_SN");
        public final static Property GpsInfo = new Property(2, String.class, "gpsInfo", false, "GPS_INFO");
        public final static Property HospitalName = new Property(3, String.class, "hospitalName", false, "HOSPITAL_NAME");
    }

    private DaoSession daoSession;


    public HospitalDao(DaoConfig config) {
        super(config);
    }
    
    public HospitalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOSPITAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idHospital
                "\"HOSPITAL_SN\" TEXT," + // 1: hospitalSn
                "\"GPS_INFO\" TEXT," + // 2: gpsInfo
                "\"HOSPITAL_NAME\" TEXT);"); // 3: hospitalName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOSPITAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Hospital entity) {
        stmt.clearBindings();
 
        Long idHospital = entity.getIdHospital();
        if (idHospital != null) {
            stmt.bindLong(1, idHospital);
        }
 
        String hospitalSn = entity.getHospitalSn();
        if (hospitalSn != null) {
            stmt.bindString(2, hospitalSn);
        }
 
        String gpsInfo = entity.getGpsInfo();
        if (gpsInfo != null) {
            stmt.bindString(3, gpsInfo);
        }
 
        String hospitalName = entity.getHospitalName();
        if (hospitalName != null) {
            stmt.bindString(4, hospitalName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Hospital entity) {
        stmt.clearBindings();
 
        Long idHospital = entity.getIdHospital();
        if (idHospital != null) {
            stmt.bindLong(1, idHospital);
        }
 
        String hospitalSn = entity.getHospitalSn();
        if (hospitalSn != null) {
            stmt.bindString(2, hospitalSn);
        }
 
        String gpsInfo = entity.getGpsInfo();
        if (gpsInfo != null) {
            stmt.bindString(3, gpsInfo);
        }
 
        String hospitalName = entity.getHospitalName();
        if (hospitalName != null) {
            stmt.bindString(4, hospitalName);
        }
    }

    @Override
    protected final void attachEntity(Hospital entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Hospital readEntity(Cursor cursor, int offset) {
        Hospital entity = new Hospital( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idHospital
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hospitalSn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gpsInfo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // hospitalName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Hospital entity, int offset) {
        entity.setIdHospital(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHospitalSn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGpsInfo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHospitalName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Hospital entity, long rowId) {
        entity.setIdHospital(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Hospital entity) {
        if(entity != null) {
            return entity.getIdHospital();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Hospital entity) {
        return entity.getIdHospital() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
