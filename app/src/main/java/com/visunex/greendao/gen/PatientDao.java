package com.visunex.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.android.greendaodatabase.entites.Patient;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENT".
*/
public class PatientDao extends AbstractDao<Patient, Long> {

    public static final String TABLENAME = "PATIENT";

    /**
     * Properties of entity Patient.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdPatient = new Property(0, Long.class, "idPatient", true, "_id");
        public final static Property PatientUuid = new Property(1, long.class, "patientUuid", false, "PATIENT_UUID");
        public final static Property PatientId = new Property(2, String.class, "patientId", false, "PATIENT_ID");
        public final static Property FirstName = new Property(3, String.class, "firstName", false, "FIRST_NAME");
        public final static Property MiddleName = new Property(4, String.class, "middleName", false, "MIDDLE_NAME");
        public final static Property LastName = new Property(5, String.class, "lastName", false, "LAST_NAME");
        public final static Property Gender = new Property(6, int.class, "gender", false, "GENDER");
        public final static Property BirthDate = new Property(7, String.class, "birthDate", false, "BIRTH_DATE");
        public final static Property BirthPlace = new Property(8, String.class, "birthPlace", false, "BIRTH_PLACE");
        public final static Property Citizenship = new Property(9, String.class, "citizenship", false, "CITIZENSHIP");
        public final static Property BrithWeight = new Property(10, int.class, "brithWeight", false, "BRITH_WEIGHT");
        public final static Property BrithHeight = new Property(11, int.class, "brithHeight", false, "BRITH_HEIGHT");
        public final static Property Gestation_age = new Property(12, int.class, "gestation_age", false, "GESTATION_AGE");
        public final static Property GuardianName = new Property(13, String.class, "guardianName", false, "GUARDIAN_NAME");
        public final static Property Slibing = new Property(14, int.class, "slibing", false, "SLIBING");
        public final static Property Nationality = new Property(15, String.class, "nationality", false, "NATIONALITY");
        public final static Property Tel = new Property(16, String.class, "tel", false, "TEL");
        public final static Property GuardianShip = new Property(17, String.class, "guardianShip", false, "GUARDIAN_SHIP");
        public final static Property CreateDate = new Property(18, String.class, "createDate", false, "CREATE_DATE");
        public final static Property HospitalSn = new Property(19, String.class, "hospitalSn", false, "HOSPITAL_SN");
    }

    private DaoSession daoSession;

    private Query<Patient> hospital_PatientsQuery;

    public PatientDao(DaoConfig config) {
        super(config);
    }
    
    public PatientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idPatient
                "\"PATIENT_UUID\" INTEGER NOT NULL ," + // 1: patientUuid
                "\"PATIENT_ID\" TEXT," + // 2: patientId
                "\"FIRST_NAME\" TEXT," + // 3: firstName
                "\"MIDDLE_NAME\" TEXT," + // 4: middleName
                "\"LAST_NAME\" TEXT," + // 5: lastName
                "\"GENDER\" INTEGER NOT NULL ," + // 6: gender
                "\"BIRTH_DATE\" TEXT," + // 7: birthDate
                "\"BIRTH_PLACE\" TEXT," + // 8: birthPlace
                "\"CITIZENSHIP\" TEXT," + // 9: citizenship
                "\"BRITH_WEIGHT\" INTEGER NOT NULL ," + // 10: brithWeight
                "\"BRITH_HEIGHT\" INTEGER NOT NULL ," + // 11: brithHeight
                "\"GESTATION_AGE\" INTEGER NOT NULL ," + // 12: gestation_age
                "\"GUARDIAN_NAME\" TEXT," + // 13: guardianName
                "\"SLIBING\" INTEGER NOT NULL ," + // 14: slibing
                "\"NATIONALITY\" TEXT," + // 15: nationality
                "\"TEL\" TEXT," + // 16: tel
                "\"GUARDIAN_SHIP\" TEXT," + // 17: guardianShip
                "\"CREATE_DATE\" TEXT," + // 18: createDate
                "\"HOSPITAL_SN\" TEXT);"); // 19: hospitalSn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Patient entity) {
        stmt.clearBindings();
 
        Long idPatient = entity.getIdPatient();
        if (idPatient != null) {
            stmt.bindLong(1, idPatient);
        }
        stmt.bindLong(2, entity.getPatientUuid());
 
        String patientId = entity.getPatientId();
        if (patientId != null) {
            stmt.bindString(3, patientId);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(4, firstName);
        }
 
        String middleName = entity.getMiddleName();
        if (middleName != null) {
            stmt.bindString(5, middleName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(6, lastName);
        }
        stmt.bindLong(7, entity.getGender());
 
        String birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindString(8, birthDate);
        }
 
        String birthPlace = entity.getBirthPlace();
        if (birthPlace != null) {
            stmt.bindString(9, birthPlace);
        }
 
        String citizenship = entity.getCitizenship();
        if (citizenship != null) {
            stmt.bindString(10, citizenship);
        }
        stmt.bindLong(11, entity.getBrithWeight());
        stmt.bindLong(12, entity.getBrithHeight());
        stmt.bindLong(13, entity.getGestation_age());
 
        String guardianName = entity.getGuardianName();
        if (guardianName != null) {
            stmt.bindString(14, guardianName);
        }
        stmt.bindLong(15, entity.getSlibing());
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(16, nationality);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(17, tel);
        }
 
        String guardianShip = entity.getGuardianShip();
        if (guardianShip != null) {
            stmt.bindString(18, guardianShip);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(19, createDate);
        }
 
        String hospitalSn = entity.getHospitalSn();
        if (hospitalSn != null) {
            stmt.bindString(20, hospitalSn);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Patient entity) {
        stmt.clearBindings();
 
        Long idPatient = entity.getIdPatient();
        if (idPatient != null) {
            stmt.bindLong(1, idPatient);
        }
        stmt.bindLong(2, entity.getPatientUuid());
 
        String patientId = entity.getPatientId();
        if (patientId != null) {
            stmt.bindString(3, patientId);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(4, firstName);
        }
 
        String middleName = entity.getMiddleName();
        if (middleName != null) {
            stmt.bindString(5, middleName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(6, lastName);
        }
        stmt.bindLong(7, entity.getGender());
 
        String birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindString(8, birthDate);
        }
 
        String birthPlace = entity.getBirthPlace();
        if (birthPlace != null) {
            stmt.bindString(9, birthPlace);
        }
 
        String citizenship = entity.getCitizenship();
        if (citizenship != null) {
            stmt.bindString(10, citizenship);
        }
        stmt.bindLong(11, entity.getBrithWeight());
        stmt.bindLong(12, entity.getBrithHeight());
        stmt.bindLong(13, entity.getGestation_age());
 
        String guardianName = entity.getGuardianName();
        if (guardianName != null) {
            stmt.bindString(14, guardianName);
        }
        stmt.bindLong(15, entity.getSlibing());
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(16, nationality);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(17, tel);
        }
 
        String guardianShip = entity.getGuardianShip();
        if (guardianShip != null) {
            stmt.bindString(18, guardianShip);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(19, createDate);
        }
 
        String hospitalSn = entity.getHospitalSn();
        if (hospitalSn != null) {
            stmt.bindString(20, hospitalSn);
        }
    }

    @Override
    protected final void attachEntity(Patient entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Patient readEntity(Cursor cursor, int offset) {
        Patient entity = new Patient( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idPatient
            cursor.getLong(offset + 1), // patientUuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // patientId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // firstName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // middleName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastName
            cursor.getInt(offset + 6), // gender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // birthPlace
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // citizenship
            cursor.getInt(offset + 10), // brithWeight
            cursor.getInt(offset + 11), // brithHeight
            cursor.getInt(offset + 12), // gestation_age
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // guardianName
            cursor.getInt(offset + 14), // slibing
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // nationality
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // tel
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // guardianShip
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // createDate
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // hospitalSn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Patient entity, int offset) {
        entity.setIdPatient(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPatientUuid(cursor.getLong(offset + 1));
        entity.setPatientId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirstName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMiddleName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGender(cursor.getInt(offset + 6));
        entity.setBirthDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBirthPlace(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCitizenship(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBrithWeight(cursor.getInt(offset + 10));
        entity.setBrithHeight(cursor.getInt(offset + 11));
        entity.setGestation_age(cursor.getInt(offset + 12));
        entity.setGuardianName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSlibing(cursor.getInt(offset + 14));
        entity.setNationality(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTel(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setGuardianShip(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCreateDate(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHospitalSn(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Patient entity, long rowId) {
        entity.setIdPatient(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Patient entity) {
        if(entity != null) {
            return entity.getIdPatient();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Patient entity) {
        return entity.getIdPatient() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "patients" to-many relationship of Hospital. */
    public List<Patient> _queryHospital_Patients(String hospitalSn) {
        synchronized (this) {
            if (hospital_PatientsQuery == null) {
                QueryBuilder<Patient> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HospitalSn.eq(null));
                hospital_PatientsQuery = queryBuilder.build();
            }
        }
        Query<Patient> query = hospital_PatientsQuery.forCurrentThread();
        query.setParameter(0, hospitalSn);
        return query.list();
    }

}
